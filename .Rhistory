lat<-as.double(strsplit(comb[i],split=",")[[1]][2])
print(lat)
if((lat<(40) || lat>(45) ) && flag==FALSE){
wrong_index<-c(wrong_index,i)
# filter<-TRUE
}
#if(!filter){
tw_long<-c(tw_long,long)
tw_lat<-c(tw_lat,lat)
#  }
# filter<-FALSE
flag<-FALSE
}
print(tw_lat)
topic_long<-vector()
topic_lat<-vector()
#score<-file("C:/Akhil/UH 3rd sem/Thesis/Tweet_Emotion_Analysis/newbatch_scores.txt",open="r")
scores_18<-vector()
for (i in 1:length(scores_comb)){
scores_18<-c(scores_18,as.double(scores_comb[i]))
}
scores<-vector()
for(i in 1:length(scores_18)){
if(i %in%  wrong_index ){
next
}else{
#print("hello")
#if(scores_18[i]>=0.3 || scores_18[i]<=-0.3){
#print("hello")
topic_long<-c(topic_long,tw_long[i])
#print("bye")
topic_lat<-c(topic_lat,tw_lat[i])
scores<-c(scores,scores_18[i])
#print(topic_loc)
#print(topic_long)
#}
}
}
print(topic_long)
topic_loc<-cbind(topic_long,topic_lat)
dff = data.frame(topic_lat, topic_long)
#print(topic_loc)
range_long<-c(-79,-76)
range_lat<-c(42,43.5)
weighted_emotion = data.frame(topic_lat, topic_long, scores)
bandwidth<-0.05
intervals<-30
grid1 <- function(n, range = c(0., 1.), edge = TRUE)
{
if(any(n < 0. | round(n) != n))
stop("n must be nonnegative and integer")
G <- rep(0., n)
if(edge) {
G <- seq(from = min(range), to = max(range), by = abs(diff(
range))/(n - 1.))
}
else {
lj <- abs(diff(range))
incr <- lj/(2. * n)
G <- seq(from = min(range) + incr, to = max(range) - incr,
by = 2. * incr)
}
G
}
grid2 <- function(x, y)
{
lx <- length(x)
ly <- length(y)
xy <- matrix(0, nrow = lx * ly, ncol = 2)
l <- 0
for(j in 1:ly) {
for(i in 1:lx) {
l <- l + 1
xy[l,  ] <- c(x[i], y[j])
}
}
xy
}
#sink("output_newyork.txt")
require(KernSmooth)
require(sparr)
require(ggplot2)
require(sm)
require(spatstat)
library("leaflet")
library("data.table")
library("sp")
library("rgdal")
# library("maptools")
library("KernSmooth")
for (i in 1: 7){
locs <- paste("locs",i, sep = "")
scores_str <- paste("scores_str",i, sep = "")
hh<- paste("2014-06-0",i,"_36_ID_loc.txt",sep = "")
hh_scores<- paste("2014-06-0",i,"_36_ID_scores.txt",sep = "")
eval(call("<-", as.name(scores_str), readLines(file(hh_scores ,open="r"), n =1000)))
eval(call("<-", as.name(locs), readLines(file(hh ,open="r"), n = 1000)))
}
comb <- cbind(locs1, locs2, locs3, locs4, locs5, locs6, locs7)
scores_comb <- cbind(scores_str1, scores_str2, scores_str3, scores_str4, scores_str5, scores_str6, scores_str7)
tw_long<-vector()
tw_lat<-vector()
wrong_index<-vector()
flag<-FALSE
options(digits=10)
print(long)
for i in range(1:length(locs1)){
long<-as.double(strsplit(locs1,split=",")[i])
}
for i in range(1:length(locs1)){
long<-as.double(strsplit(locs1,split=",")[i])
}
for i in range(1:length(locs1)){
long<-as.double(strsplit(locs1,split=",")[i])
}
for i in range(1:length(locs1)){
long<-as.double(strsplit(locs1,split=",")[i])
}
long<-as.double(strsplit(locs1,split=",")[i])
long<-as.double(strsplit(locs1,split=",")[1])
long<-as.double(strsplit(locs1,split=","))
long<-as.double(strsplit(locs1,split=",")[1][1])
grid1 <- function(n, range = c(0., 1.), edge = TRUE)
{
if(any(n < 0. | round(n) != n))
stop("n must be nonnegative and integer")
G <- rep(0., n)
if(edge) {
G <- seq(from = min(range), to = max(range), by = abs(diff(
range))/(n - 1.))
}
else {
lj <- abs(diff(range))
incr <- lj/(2. * n)
G <- seq(from = min(range) + incr, to = max(range) - incr,
by = 2. * incr)
}
G
}
grid2 <- function(x, y)
{
lx <- length(x)
ly <- length(y)
xy <- matrix(0, nrow = lx * ly, ncol = 2)
l <- 0
for(j in 1:ly) {
for(i in 1:lx) {
l <- l + 1
xy[l,  ] <- c(x[i], y[j])
}
}
xy
}
#sink("output_newyork.txt")
require(KernSmooth)
require(sparr)
require(ggplot2)
require(sm)
require(spatstat)
library("leaflet")
library("data.table")
library("sp")
library("rgdal")
# library("maptools")
library("KernSmooth")
for (i in 1: 7){
locs <- paste("locs",i, sep = "")
scores_str <- paste("scores_str",i, sep = "")
hh<- paste("2014-06-0",i,"_36_ID_loc.txt",sep = "")
hh_scores<- paste("2014-06-0",i,"_36_ID_scores.txt",sep = "")
eval(call("<-", as.name(scores_str), readLines(file(hh_scores ,open="r"), n =1000)))
eval(call("<-", as.name(locs), readLines(file(hh ,open="r"), n = 1000)))
}
comb <- cbind(locs1, locs2, locs3, locs4, locs5, locs6, locs7)
scores_comb <- cbind(scores_str1, scores_str2, scores_str3, scores_str4, scores_str5, scores_str6, scores_str7)
tw_long<-vector()
tw_lat<-vector()
wrong_index<-vector()
flag<-FALSE
options(digits=10)
long<-as.double(strsplit(locs1,split=",")[1][1])
grid1 <- function(n, range = c(0., 1.), edge = TRUE)
{
if(any(n < 0. | round(n) != n))
stop("n must be nonnegative and integer")
G <- rep(0., n)
if(edge) {
G <- seq(from = min(range), to = max(range), by = abs(diff(
range))/(n - 1.))
}
else {
lj <- abs(diff(range))
incr <- lj/(2. * n)
G <- seq(from = min(range) + incr, to = max(range) - incr,
by = 2. * incr)
}
G
}
grid2 <- function(x, y)
{
lx <- length(x)
ly <- length(y)
xy <- matrix(0, nrow = lx * ly, ncol = 2)
l <- 0
for(j in 1:ly) {
for(i in 1:lx) {
l <- l + 1
xy[l,  ] <- c(x[i], y[j])
}
}
xy
}
#sink("output_newyork.txt")
require(KernSmooth)
require(sparr)
require(ggplot2)
require(sm)
require(spatstat)
library("leaflet")
library("data.table")
library("sp")
library("rgdal")
# library("maptools")
library("KernSmooth")
for (i in 1: 7){
locs <- paste("locs",i, sep = "")
scores_str <- paste("scores_str",i, sep = "")
hh<- paste("2014-06-0",i,"_36_ID_loc.txt",sep = "")
hh_scores<- paste("2014-06-0",i,"_36_ID_scores.txt",sep = "")
eval(call("<-", as.name(scores_str), readLines(file(hh_scores ,open="r"), n =1000)))
eval(call("<-", as.name(locs), readLines(file(hh ,open="r"), n = 1000)))
}
comb <- cbind(locs1, locs2, locs3, locs4, locs5, locs6, locs7)
scores_comb <- cbind(scores_str1, scores_str2, scores_str3, scores_str4, scores_str5, scores_str6, scores_str7)
hh_scores
scores_comb
tw_long<-vector()
tw_lat<-vector()
wrong_index<-vector()
flag<-FALSE
#filter<-FALSE
for (i in 1:length(locs1)){
options(digits=10)
long<-as.double(strsplit(locs1[i],split=",")[[1]][1])
if(long< (-80) || long>(-71) ){
wrong_index<-c(wrong_index,i)
flag<-TRUE
#filter<-TRUE
}
options(digits=10)
lat<-as.double(strsplit(locs1[i],split=",")[[1]][2])
print(lat)
if((lat<(40) || lat>(45) ) && flag==FALSE){
wrong_index<-c(wrong_index,i)
# filter<-TRUE
}
#if(!filter){
tw_long<-c(tw_long,long)
tw_lat<-c(tw_lat,lat)
#  }
# filter<-FALSE
flag<-FALSE
}
#filter<-FALSE
for (i in 1:length(locs1)){
options(digits=10)
long<-as.double(strsplit(locs1[i],split=",")[[1]][1])
if(long< (-80) || long>(-71) ){
wrong_index<-c(wrong_index,i)
flag<-TRUE
#filter<-TRUE
}
options(digits=10)
lat<-as.double(strsplit(locs1[i],split=",")[[1]][2])
print(lat)
if((lat<(40) || lat>(45) ) && flag==FALSE){
wrong_index<-c(wrong_index,i)
# filter<-TRUE
}
#if(!filter){
tw_long<-c(tw_long,long)
tw_lat<-c(tw_lat,lat)
#  }
# filter<-FALSE
flag<-FALSE
}
topic_long<-vector()
topic_lat<-vector()
scores_18<-vector()
for (i in 1:length(scores_str1)){
scores_18<-c(scores_18,as.double(scores_str1[i]))
}
scores_18
scores<-vector()
for(i in 1:length(scores_18)){
if(i %in%  wrong_index ){
next
}else{
#print("hello")
#if(scores_18[i]>=0.3 || scores_18[i]<=-0.3){
#print("hello")
topic_long<-c(topic_long,tw_long[i])
#print("bye")
topic_lat<-c(topic_lat,tw_lat[i])
scores<-c(scores,scores_18[i])
#print(topic_loc)
#print(topic_long)
#}
}
}
topic_loc<-cbind(topic_long,topic_lat)
dff = data.frame(topic_lat, topic_long)
dff
range_long<-c(-79,-76)
range_lat<-c(42,43.5)
weighted_emotion = data.frame(topic_lat, topic_long, scores)
bandwidth<-0.05
intervals<-30
counter = 1
#idx <- seq(from=91,to=(nrow(topic_loc)),by=10)
idx <- seq(from=991,to=(nrow(topic_loc)),by=10) ##identify midpoint for 20 rows with slide 5
for (i in idx){
output <- paste("june",counter, sep = "")
nn <- paste("sc",counter, sep = "")
counter = counter + 1
#start = i-90; stop = i+9
start = i-990; stop = i+9
#assign(paste0("newdata",i-90),topic_loc[start:stop,])
#eval(call("<-", as.name(nn), scores[start:stop]))
spb<- scores[start:stop]
#assign(paste0("sc",counter),scores[start:stop])
#namehere = paste("sc",counter, sep = "")
#n <- paste("score_new")
#eval(call("<-", as.name(n), scores[start:stop]))
tweet.caseb<-bkde2D(topic_loc[start:stop,],bandwidth=c(bandwidth,bandwidth),gridsize = c(intervals, intervals),range.x=list(range_long,range_lat), truncate = TRUE)
##########get the score matrix#######
xmin<--79.00000000
xmax<--76.00000000
ymin<-42.00000000
ymax<-43.50000000
hand_max<-0
pointx <- topic_loc[start:stop,1]
pointy <- topic_loc[start:stop,2]
#print(pointx)
#print(pointy)
x <- grid1( intervals, range = c(xmin,xmax))
y <- grid1( intervals, range = c(ymin,ymax))
xinterval<-(xmax-xmin)/(intervals-1)
yinterval<-(ymax-ymin)/(intervals-1)
xy <- grid2(x,y)
hand<-vector()
#print(xy)
for(i in 1: (intervals*intervals)) {
X<-xy[i,1]
Y<-xy[i,2]
hand_tmp<-vector()
for(m in 1:length(pointx)){
if(pointx[m]<X-xinterval ||  pointy[m]<Y-yinterval || pointx[m]>X+xinterval || pointy[m]>Y+yinterval) next;
hand_tmp<-c(hand_tmp,spb[m])
#print("hello")
}
if(length(hand_tmp)==0){
hand<-c(hand,0)
}else{
hand<-c(hand,mean(hand_tmp))
}
}
hand_final<-matrix(hand,ncol=length(x))
score_list<-hand_final
density_values<-tweet.caseb$fhat
product<- density_values*score_list
#-------------------------------------
cl1<-contourLines(x = x, y = y, z = product ,levels=0.0003) # threshold 10  50-40
cl2<-contourLines(x = x, y = y, z = product ,levels=0.001956) # threshold 15  50-35
cl3<-contourLines(x = x, y = y, z = product ,levels=-0.0003) # threshold 20  50-30
cl4<-contourLines(x = x, y = y, z = product ,levels=-0.001956) # threshold 20  50-30
## CONVERT CONTOUR LINES TO POLYGONS
pgons <- lapply(1:length(cl1), function(i)
Polygons(list(Polygon(cbind(cl1[[i]]$x, cl1[[i]]$y))), ID=i))
spgons = SpatialPolygons(pgons)
#---------------------------------
LEVS2 <- as.factor(sapply(cl2, `[[`, "level"))
NLEV2 <- length(levels(LEVS2))
## CONVERT CONTOUR LINES TO POLYGONS
pgons2 <- lapply(1:length(cl2), function(i)
Polygons(list(Polygon(cbind(cl2[[i]]$x, cl2[[i]]$y))), ID=i))
spgons2 = SpatialPolygons(pgons2)
#------------------------------------
LEVS3 <- as.factor(sapply(cl3, `[[`, "level"))
NLEV3 <- length(levels(LEVS3))
## CONVERT CONTOUR LINES TO POLYGONS
pgons3 <- lapply(1:length(cl3), function(i)
Polygons(list(Polygon(cbind(cl3[[i]]$x, cl3[[i]]$y))), ID=i))
spgons3 = SpatialPolygons(pgons3)
#---------------------------------------
LEVS4 <- as.factor(sapply(cl4, `[[`, "level"))
NLEV4 <- length(levels(LEVS4))
## CONVERT CONTOUR LINES TO POLYGONS
pgons4 <- lapply(1:length(cl4), function(i)
Polygons(list(Polygon(cbind(cl4[[i]]$x, cl4[[i]]$y))), ID=i))
spgons4 = SpatialPolygons(pgons4)
# Store the unique levels of the contours, this will come in handy for colouring
cl5<-contourLines(x = x, y = y, z = product ,levels=c(-0.0003, -0.001956, 0.0003, 0.001956 ))
values = unique(sapply(1:length(cl5),function(i) cl5[[i]]$level))
## Leaflet map with polygons
eval(call("<-", as.name(output), leaflet() %>% addTiles() %>%
addPolygons(data = spgons, fillColor = "orange", color ="orange") %>%
addPolygons(data = spgons2, fillColor = "darkgreen", color ="darkgreen")  %>%
addPolygons(data = spgons3, fillColor = "red", color ="red")%>%
addPolygons(data = spgons4, fillColor = "purple", color ="purple") %>%
addLegend(labels = c("0.0003","0.001956","-0.0003","-0.001956"), values = values, colors = c("orange","darkgreen","red","purple"), opacity = 0.7, title = NULL,
position = "bottomright") %>%
setView(lng = -77.25, lat = 42.8, zoom = 8)))
}
```
```{r}
counter = 1
idx <- seq(from=91,to=(nrow(topic_loc)),by=10)
#idx <- seq(from=991,to=(nrow(topic_loc)),by=10) ##identify midpoint for 20 rows with slide 5
for (i in idx){
output <- paste("100june",counter, sep = "")
nn <- paste("sc",counter, sep = "")
counter = counter + 1
start = i-90; stop = i+9
#start = i-990; stop = i+9
#assign(paste0("newdata",i-90),topic_loc[start:stop,])
#eval(call("<-", as.name(nn), scores[start:stop]))
spb<- scores[start:stop]
#assign(paste0("sc",counter),scores[start:stop])
#namehere = paste("sc",counter, sep = "")
#n <- paste("score_new")
#eval(call("<-", as.name(n), scores[start:stop]))
tweet.caseb<-bkde2D(topic_loc[start:stop,],bandwidth=c(bandwidth,bandwidth),gridsize = c(intervals, intervals),range.x=list(range_long,range_lat), truncate = TRUE)
##########get the score matrix#######
xmin<--79.00000000
xmax<--76.00000000
ymin<-42.00000000
ymax<-43.50000000
hand_max<-0
pointx <- topic_loc[start:stop,1]
pointy <- topic_loc[start:stop,2]
#print(pointx)
#print(pointy)
x <- grid1( intervals, range = c(xmin,xmax))
y <- grid1( intervals, range = c(ymin,ymax))
xinterval<-(xmax-xmin)/(intervals-1)
yinterval<-(ymax-ymin)/(intervals-1)
xy <- grid2(x,y)
hand<-vector()
#print(xy)
for(i in 1: (intervals*intervals)) {
X<-xy[i,1]
Y<-xy[i,2]
hand_tmp<-vector()
for(m in 1:length(pointx)){
if(pointx[m]<X-xinterval ||  pointy[m]<Y-yinterval || pointx[m]>X+xinterval || pointy[m]>Y+yinterval) next;
hand_tmp<-c(hand_tmp,spb[m])
#print("hello")
}
if(length(hand_tmp)==0){
hand<-c(hand,0)
}else{
hand<-c(hand,mean(hand_tmp))
}
}
hand_final<-matrix(hand,ncol=length(x))
score_list<-hand_final
density_values<-tweet.caseb$fhat
product<- density_values*score_list
#-------------------------------------
cl1<-contourLines(x = x, y = y, z = product ,levels=0.0003) # threshold 10  50-40
cl2<-contourLines(x = x, y = y, z = product ,levels=0.001956) # threshold 15  50-35
cl3<-contourLines(x = x, y = y, z = product ,levels=-0.0003) # threshold 20  50-30
cl4<-contourLines(x = x, y = y, z = product ,levels=-0.001956) # threshold 20  50-30
## CONVERT CONTOUR LINES TO POLYGONS
pgons <- lapply(1:length(cl1), function(i)
Polygons(list(Polygon(cbind(cl1[[i]]$x, cl1[[i]]$y))), ID=i))
spgons = SpatialPolygons(pgons)
#---------------------------------
LEVS2 <- as.factor(sapply(cl2, `[[`, "level"))
NLEV2 <- length(levels(LEVS2))
## CONVERT CONTOUR LINES TO POLYGONS
pgons2 <- lapply(1:length(cl2), function(i)
Polygons(list(Polygon(cbind(cl2[[i]]$x, cl2[[i]]$y))), ID=i))
spgons2 = SpatialPolygons(pgons2)
#------------------------------------
LEVS3 <- as.factor(sapply(cl3, `[[`, "level"))
NLEV3 <- length(levels(LEVS3))
## CONVERT CONTOUR LINES TO POLYGONS
pgons3 <- lapply(1:length(cl3), function(i)
Polygons(list(Polygon(cbind(cl3[[i]]$x, cl3[[i]]$y))), ID=i))
spgons3 = SpatialPolygons(pgons3)
#---------------------------------------
LEVS4 <- as.factor(sapply(cl4, `[[`, "level"))
NLEV4 <- length(levels(LEVS4))
## CONVERT CONTOUR LINES TO POLYGONS
pgons4 <- lapply(1:length(cl4), function(i)
Polygons(list(Polygon(cbind(cl4[[i]]$x, cl4[[i]]$y))), ID=i))
spgons4 = SpatialPolygons(pgons4)
# Store the unique levels of the contours, this will come in handy for colouring
cl5<-contourLines(x = x, y = y, z = product ,levels=c(-0.0003, -0.001956, 0.0003, 0.001956 ))
values = unique(sapply(1:length(cl5),function(i) cl5[[i]]$level))
## Leaflet map with polygons
eval(call("<-", as.name(output), leaflet() %>% addTiles() %>%
addPolygons(data = spgons, fillColor = "orange", color ="orange") %>%
addPolygons(data = spgons2, fillColor = "darkgreen", color ="darkgreen")  %>%
addPolygons(data = spgons3, fillColor = "red", color ="red")%>%
addPolygons(data = spgons4, fillColor = "purple", color ="purple") %>%
addLegend(labels = c("0.0003","0.001956","-0.0003","-0.001956"), values = values, colors = c("orange","darkgreen","red","purple"), opacity = 0.7, title = NULL,
position = "bottomright") %>%
setView(lng = -77.25, lat = 42.8, zoom = 8)))
}
